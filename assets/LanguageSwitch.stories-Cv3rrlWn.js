import{j as p}from"./extends-BZziWbxp.js";import{L as i}from"./LanguageSwitch-Ddz9RR5a.js";import"./index-BP8_t0zE.js";import"./ExpandMore-DLQEc8bE.js";import"./createSvgIcon-Aui0-xl2.js";import"./DefaultPropsProvider-CBZfYqC6.js";import"./color-DCc551Ku.js";import"./Box-DNx4V9Lx.js";import"./extendSxProp-igbevVD-.js";import"./Button-CNt7OGBU.js";import"./createSimplePaletteValueFilter-bm0fmN_7.js";import"./ButtonBase-Dyd7TCuj.js";import"./emotion-react.browser.esm-B5xgBJJi.js";import"./useTimeout-BN_3i7zA.js";import"./TransitionGroupContext-CV-AyoRm.js";import"./assertThisInitialized-B9jnkVVz.js";import"./inheritsLoose-DR8r8Ogv.js";import"./useForkRef-rM2yqL0Y.js";import"./isFocusVisible-B8k4qzLc.js";import"./Typography-Chqap8zl.js";import"./index-CJDT4czw.js";import"./Menu-Cc7Ntogn.js";import"./react-is.production.min-DUDD-a5e.js";import"./index-DiL3kUBv.js";import"./isHostComponent-DVu5iVWx.js";import"./useSlot-BxHZVQtO.js";import"./resolveComponentProps-BWlflic0.js";import"./Modal-DlLEeJp6.js";import"./getScrollbarSize-Bqq2hMjQ.js";import"./ownerDocument-DW-IO8s5.js";import"./ownerWindow-BN2rbQ_G.js";import"./createChainedFunction-BO_9K8Jh.js";import"./Backdrop-DB4hLLMp.js";import"./useTheme-Clt_GTdr.js";import"./utils-BkwWHdx-.js";import"./index-DJkmxc1E.js";import"./getReactNodeRef-oQE-qRg8.js";import"./Portal-ntkeNcXE.js";import"./Paper-CjD7ugLR.js";import"./Grow-D6iu-O35.js";import"./MenuList-CFY98bhA.js";import"./List-5Y-w8OKN.js";import"./useSlotProps-Xloz1bZq.js";import"./MenuItem-B3fhY3LG.js";import"./dividerClasses-1cIsuIxJ.js";import"./listItemTextClasses-1go-Qm1c.js";import"./listItemIconClasses-BVYrFuto.js";const n=[{lang:"de",nativeName:"Deutsch"},{lang:"en",nativeName:"English"},{lang:"fr",nativeName:"FranÃ§aise"}],rt={title:"Factory/LanguageSwitch",component:i,argTypes:{defaultLanguage:{control:"select",options:n.map(t=>t.lang)},onSelect:{action:"selected"}}},e={render:t=>p.jsx(i,{...t,defaultLanguage:t.defaultLanguage,onSelect:m=>{t.onSelect&&t.onSelect(m)},languages:n}),args:{defaultLanguage:"en"}};var r,o,a;e.parameters={...e.parameters,docs:{...(r=e.parameters)==null?void 0:r.docs,source:{originalSource:`{
  render: args => {
    return <LanguageSwitch {...args} defaultLanguage={args.defaultLanguage} onSelect={(newSelectedLanguage: string) => {
      if (args.onSelect) {
        args.onSelect(newSelectedLanguage);
      }
    }} languages={languages} />;
  },
  args: {
    defaultLanguage: 'en'
  }
}`,...(a=(o=e.parameters)==null?void 0:o.docs)==null?void 0:a.source}}};const ot=["Default"];export{e as Default,ot as __namedExportsOrder,rt as default};
